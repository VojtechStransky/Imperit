@inject Services.IPlayersLoader players;
@inject Services.IProvincesLoader provinces;
@inject Services.IActionLoader actions;
@inject Services.IActivePlayer active;

@using Mode = GameSwitch.Mode;

@code{
    [Parameter] public Player? Player { get; set; }
    [Parameter] public bool IsActive { get; set; }
    [Parameter] public Action<Mode, Province?, Province?, Player?> Switch { get; set; } = ((a, x, y, z) => { });
    [Parameter] public bool Preview { get; set; }
    Province? OnClick(int clicked, Province? from)
    {
        if (!IsActive || from is State.Mountains)
        {
            return null;
        }
        if (from is null && provinces[clicked].IsControlledBy(Player!.Id))
        {
            return provinces[clicked];
        }
        if (from is null && provinces[clicked] is Land L1 && !L1.Occupied)
        {
            Switch(Mode.CmdPurchase, L1, L1, null);
            return null;
        }
        if (from?.Id == clicked)
        {
            Switch(Mode.CmdRecruit, from, from, null);
            return null;
        }
        if (from is Province)
        {
            Switch(Mode.CmdMove, from, provinces[clicked], null);
            return null;
        }
        return from;
    }
}
@{ 
    IProvinces prov = provinces;
    if (Preview)
    {
        var queue = actions.Where(x => x is ArmyAction);
        prov = queue.EndOfTurn(players, provinces, active.Id).Item3;
    }
}
<Map Width="1000" Height="1000" Provinces="@prov" OnClick="OnClick" FontSize="9" SelectedColor="@(new Color(0, 0, 0, 100))"/>