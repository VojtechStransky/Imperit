@inject Services.IMap map;
@inject Services.IPlayersLoader players;
@inject Services.IProvincesLoader pr;
@inject Services.IActionLoader actions;
@inject Services.IActivePlayer active;

@using Mode = GameSwitch.Mode;

@code{
    [Parameter] public State.Player? Player { get; set; }
    [Parameter] public bool IsActive { get; set; }
    [Parameter] public Action<Mode, State.Province?, State.Province?, State.Player?> Switch { get; set; } = ((a, x, y, z) => { });
    [Parameter] public bool Preview { get; set; }
    State.Province? From = null;
    void OnClick(State.Province clicked)
    {
        if (IsActive)
        {
            if (From == null)
            {
                if (clicked.IsControlledBy(Player!.Id))
                {
                    From = clicked;
                    this.StateHasChanged();
                }
                else if (clicked is State.Land L1 && !L1.Occupied)
                {
                    Switch(Mode.CmdPurchase, L1, L1, null);
                }
            }
            else if (From != clicked)
            {
                Switch(Mode.CmdMove, From, clicked, null);
            }
            else if (From is State.Land)
            {
                Switch(Mode.CmdRecruit, From, From, null);
            }
            else
            {
                From = null;
                this.StateHasChanged();
            }
        }
    }
    State.Color ColorFn(State.Province province) => Shape.ColorOf(province).Darken(light: province == From ? (byte)120 : (byte)255);
}
@{ 
    IReadOnlyList<State.Province> provinces = pr.Provinces;
    if (Preview)
    {
        var queue = actions.Where(x => x is Dynamics.Actions.Move || x is Dynamics.Actions.PortRenewal);
        provinces = queue.EndOfTurn(players, pr.Provinces, active.Id).Item3;
    }
}
<Map Width="1000" Height="1000" Shapes="@map.Shapes" Provinces="@provinces" Mountains="@map.Mountains" ColorFn="ColorFn" OnClick="OnClick" FontSize="9" />