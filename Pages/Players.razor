@inject Services.IActionLoader actions;
@inject Services.IActivePlayer active;
@inject Services.IPlayersLoader players;
@inject Services.IProvincesLoader pr;

@using Mode = GameSwitch.Mode;

@code{
    [Parameter] public State.Player? LoggedIn { get; set; }
    [Parameter] public Action<Mode, State.Land?, State.Land?, State.Player?> Switch { get; set; } = ((a, x, y, z) => { });
    void Donate(State.Player player) => Switch(Mode.CmdTransaction, null, null, player);
    bool Repayment { get; set; } = false;
}
<p>Přihlášen: <Player Who="@LoggedIn"/></p>
<br/>

<table>
    @foreach (var player in players)
    {
        <tr>
            @if (player.Alive)
            {
                <td><Player Who="@player"/></td>
                <td>@(player.Money)@Sym.Money</td>
                <td>(+@(player.Income)@Sym.Money)</td>
                @if (player != LoggedIn)
                {
                    <td class="link-like" @onclick="@(() => Donate(player))">Věnovat</td>
                }
                else
                {
                    <td>Hraje</td>
                }
            }
            else
            {
                <td><Player Who="@player"/></td>
                <td colspan="3">je na tom jako Bůh</td>
            }
        </tr>
    }
</table>
<br/>
@foreach (var Loan in actions.Actions.Select(a => a as Dynamics.Actions.Loan).NotNull())
{
    <p>
        <Player Who="players[Loan.Debtor]" /> dluží @(Loan.Debt)@Sym.Money
        @if (LoggedIn!.Id == Loan.Debtor)
        {
            if (Repayment)
            {
                <span class="link-like" @onclick="@(() => Repayment = false)">Zrušit</span>
                <CmdRepay Return="@(() => Switch(Mode.Map, null, null, null))" LoggedIn="@LoggedIn" />
            }
            else
            {
                <span class="link-like" @onclick="@(() => Repayment = true)">Splatit</span>
            }
        }
    </p>
}
@foreach (var Attack in actions.Actions.Select(a => a as Dynamics.Actions.Attack).NotNull())
{
    <p><Player Who="@((Attack.Army as State.PlayerArmy)!.Player)"/> pochoduje s @Attack.Soldiers vojáky směr <Province This="pr.Provinces[Attack.Province]"/> s úmyslem zaútočit</p>
}
@foreach (var Add in actions.Actions.Select(a => a as Dynamics.Actions.AddSoldiers).NotNull())
{
    <p>Do provincie <Province This="pr.Provinces[Add.Province]"/> dorazí na pomoc @Add.Soldiers vojáků</p>
}
@foreach (var land in pr.Provinces.Select(p => p as State.Land).NotNull().Where(l => !l.IsStart && l.Occupied))
{
    <p>Riziko odtržení země <Province This="land"/>: @((land.Instability + 0.002).ProbabilityToString(prec: 1))</p>
}